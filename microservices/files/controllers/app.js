'use strict'
// const lang = require('../lang/ru.json')
// const root = require('app-root-path').path
// const path = require('path')
const deleteFiles = require('../libs/deleteFiles')

const req = require('app-root-path').require
const config = req('/core/upload/config/upload.json')

const File = require('../libs/path/file')

const {
  resize
} = require('../libs')

const {
  optimazition
} = require('../libs/src/optimazition')


const arrayToObject = (arr) => {
  return arr.reduce((obj, item) => {
    return (obj[item.width] = item, obj)
  }, {})
}

module.exports = (app) => {
  // === === === === === === === === === === === ===
  // –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞
  // === === === === === === === === === === === ===

  // === === === === === === === === === === === ===
  //* Admin dashboard
  // === === === === === === === === === === === ===

  // === === === === === === === === === === === ===
  //  ******************** GET *********************
  // === === === === === === === === === === === ===
  app.get('/upload/', async (req, res) => {
    res.end({
      status: 200
    })
  })

  // === === === === === === === === === === === ===
  //  ******************* POST *********************
  // === === === === === === === === === === === ===
  app.post('/upload/', async (req, res) => {
    console.log('req', req)
  })


  // === === === === === === === === === === === ===
  // ******************** POST *********************
  // === === === === === === === === === === === ===
  /** 
   * ru: –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–π —ç–Ω–¥—Ä–æ–∏–Ω—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –î–∞—ë—Ç –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä—É
   * 
   * en: After loading the image, this endpoint accepts a request to optimize the image. The answer server
   */
  app.post('/upload/:microservise', async (req, res) => {
    try {
      /**
       * @param {array} files –º–∞—Å—Å–∏–≤ —Å –æ–±—ä–µ–∫—Ç–æ–º –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
       * @param {string} files.fieldname –ò–º—è –ø–æ–ª—è
       * @param {string} files.path –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–æ—Ä–∏–≥–∏–Ω–∞–ª–∞)
       * @param {string} files.isAbsolute –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –¥–æ –∫–æ—Ä–Ω—è —Å–∞–π—Ç–∞
       * @param {string} files.folder –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–æ –ø–∞–ø–∫–∏ –≤ –∫–æ—Ç–æ—Ä—É—é –±—ã–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª
       * @param {string} files.basename –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª—ã
       * @param {string} files.newName –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
       * @param {string} files.mimeType mime —Ç–∏–ø —Ñ–∞–π–ª–∞
       * @param {string} files.encoding –∫–æ–¥–∏—Ä–æ–≤–∫–∞
       */
      const files = req.body.files
      /** –ü–∞–ø–∫–∞ –≤ –∫–æ—Ç–æ—Ä—É—é –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª */
      let arr = []
      let originalName

      let i = 0
      let length = files.length

      for (i; i < length; i++) {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ñ–∞–π–ª—É –∏–∑ –º–∞—Å—Å–∏–≤–∞
        let file = files[i]
        // {
        //   fieldname: 'file',
        //   path: '/public/images/article/original/5385fdbceae65-14.jpg',
        //   isAbsolute: '/home/misha/web/micRO/public/images/article/original/5385fdbceae65-14.jpg',
        //   folder: '/public/images/article/original/',
        //   basename: '14.jpg',
        //   mimeType: 'image/jpeg',
        //   encoding: '7bit'
        // }
        /**  */
        originalName = file.newName
        /** –ü–∞–ø–∫–∞ –≤ –∫–æ—Ç–æ—Ä—É—é –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª */
        let folder = file.folder
        /** –ü–∞–ø–∫–∞ –≤ –∫–æ—Ç–æ—Ä–æ–π –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–µ –∫–æ–ø–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π */
        let resizeFolder = new File().absolute(folder, '../resize')
        let arrayResize = await resize(file, (folder)).then(resizeFiles => resizeFiles).catch(error => error)
        arr.push(...arrayResize)
        /** 
         * @returns {array} [{
           data: < Buffer ff d8 ff e0 00 10 4 a 46 49 46 00 01 01 00 00 01 00 01 00 00 ff db 00 84 00 08 06 06 07 06 05 08 07 07 07 09 09 08 0 a 0 c 14 0 d 0 c 0b 0b 0 c 19 12 13 0 f...55739 > ,
           sourcePath: '/home/misha/web/micRO/public/images/article/resize/960_f51736c86256f-f52c0bb2675be963306a429aef5d55a4@2x.jpg',
           destinationPath: '/home/misha/web/micRO/public/images/article/resize/960_f51736c86256f-f52c0bb2675be963306a429aef5d55a4@2x.jpg'
         },{...}]
         */
        await optimazition(arrayResize, resizeFolder)
      }

      await res.status(200).json({
        status: 200,
        text: 'ok',
        files: arrayToObject(arr),
        name: originalName
      })
    } catch (e) {
      console.log('üå° Error:resize', e)
      await res.status(503).json({
        code: e.code,
        status: 503,
        message: 'Service Unavailable'
      })
    }
  })

  // === === === === === === === === === === === ===
  //  ****************** DELETE ********************
  // === === === === === === === === === === === ===
  app.delete('/files/:endpoint(.*)', async (req, res) => {
    /** –ü—Ä–æ–≤–µ—Ä–∫–∞ csrf –≤ middleware */
    try {
      /** –î–∞–Ω–Ω—ã–µ –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞ */
      let body = req.body.files
      let ok = await new File().deleteArrayFiles(body)
      if (ok) {
        res.status(200).json({
          status: 200,
          body: req.body
        })
      } else {
        new Error('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. ')
      }
    } catch (error) {
      let status = error.status || 500
      res.status(status).json({
        status: status,
        error: error.message
      })
    }
  })

  return app
}